version: "2.4"

services:
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx-proxy
  #   ports:
  #     - 8080:80
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     - backend_network
  #   depends_on:
  #     - mysql
  #     - user_app
  #     - admin_app
  #     - auth
  
  mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - ./data/db:/var/lib/mysql
    networks:
      - backend_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      MYSQL_USER: pass
      MYSQL_PASSWORD: pass
    restart: always
    ports:
      - ${PHP_MY_ADMIN_PORT}:80
    networks:
      - backend_network

  rabbitmq:
    image: rabbitmq:3.10-rc-management-alpine
    ports:
      # AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    restart: always
    networks:
      - backend_network

  auth:
    build:
      context: ./auth
      args:
        - NODE_ENV=development
      target: dev
      dockerfile: Dockerfile
    ports:
      - ${AUTH_SERVICE_PORT}:3000
    volumes:
      - ./auth:/app/
    environment:
      - SERVICE=auth
    restart: always
    env_file:
      - ./auth/.env
    networks:
      - backend_network
    depends_on:
      - mysql
      - rabbitmq

  product:
    build:
      context: ./product
      args:
        - NODE_ENV=development
      target: dev
      dockerfile: Dockerfile
    ports:
      - ${PRODUCT_SERVICE_PORT}:3000
    volumes:
      - ./product:/app/
    environment:
      - SERVICE=auth
    restart: always
    env_file:
      - ./product/.env
    networks:
      - backend_network
    depends_on:
      - mysql
      - rabbitmq
  
  order:
    build:
      context: ./order
      args:
        - NODE_ENV=development
      target: dev
      dockerfile: Dockerfile
    ports:
      - ${ORDER_SERVICE_PORT}:3000
    volumes:
      - ./order:/app/
    depends_on:
      - mysql
      - rabbitmq
    environment:
      - SERVICE=auth
    restart: always
    env_file:
      - ./order/.env
    networks:
      - backend_network
    
  
  api-gateway:
    build:
      context: ./apiGateway
      args:
        - NODE_ENV=development
      target: dev
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    volumes:
      - ./apiGateway:/app/
    environment:
      - SERVICE=auth
    restart: always
    env_file:
      - ./apiGateway/.env
    networks:
      - backend_network
    depends_on:
      - auth
      - rabbitmq

  admin_app:
    build:
      target: dev
      context: ./frontend/admin
      dockerfile: Dockerfile
    ports:
      - ${ADMIN_APP_PORT}:3000
    restart: always
    volumes:
      - ./frontend/admin:/app/
    networks:
      - backend_network
  
  static:
    build:
      context: ./static
      args:
        - NODE_ENV=development
      target: dev
      dockerfile: Dockerfile
    ports:
      - ${STATIC_SERVICE_PORT}:3000
    volumes:
      - ./static:/app/
    environment:
      - SERVICE=auth
    restart: always
    env_file:
      - ./static/.env
    networks:
      - backend_network
    depends_on:
      - mysql
      - rabbitmq
      - mongodb

  user_app:
    build:
      target: dev
      context: ./frontend/user
      dockerfile: Dockerfile
    ports:
      - ${USER_APP_PORT}:3000
    restart: always
    volumes:
      - ./frontend/user:/app/
    networks:
      - backend_network
  
  mongodb:
    image: mongo:4.4
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongoDb:/data/db
    networks:
      - backend_network
  
  

networks:
  backend_network:
    driver: bridge

volumes:
  data:
