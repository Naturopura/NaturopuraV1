import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define the ImageBuffer type
type ImageBuffer = {
  type: "Buffer";
  data: number[];
};

export interface ListProductRequest {
  name: string;
  category: string; // ID of the category
  price: number;
  quantity: number;
  description: string; // Optional field
  unit: string;
  image: ImageBuffer; // URL or file path
  currency: string;
}

export interface Category {
  _id: string;
  name: string;
  image: ImageBuffer; // Add other fields as needed
}

export interface Product {
  _id: string;
  farmerId: string;
  name: string;
  category: string;
  price: number;
  quantity: number;
  unit: string;
  description: string;
  image: ImageBuffer;
  currency: string;
  // Auto-generated by the database
}

export interface ListProductResponse {
  message: string;
  product: Product;
  category: Category;
}

// Define Product and NewProduct interfaces

export interface getProduct {
  _id: string;
  farmerId: string;
  name: string;
  category: Category;
  price: number;
  currency: string;
  quantity: number;
  description: string;
  unit: string;
  image: ImageBuffer;
}

export interface getProductsByCategoryAndPaginationRequest {
  page: number;
  limit: number;
  categoryId: string;
}

export type getProductsByCategoryAndPaginationResponse = {
  success: boolean;
  data: getProduct[];
  pagination: {
    totalProducts: number;
    currentPage: number;
    totalPages: number;
    limit: number;
  };
};

export interface UpdateProductRequest {
  _id: string; // Product ID to update
  name: string; // Optional fields to update
  category: string; // Category ID
  price: number; // Price of the product
  quantity: number; // Quantity available
  description: string; // Optional description
  image: ImageBuffer; // Base64 encoded image string or URL
  unit: string; // Measurement unit
  currency: string; // Currency code
}

export interface UpdateProductResponse {
  updatedProduct: Product; // Updated product details
  message: string; // Success message
}

// export interface CreateCategory {
//   name: string;
//   image: ImageBuffer;
// }

export interface DeleteProduct {
  productId: string;
}

export interface CategoriesResponse {
  message: string;
  categories: Category[];
}

export interface ProductsResponse {
  products: getProduct[];
}

// Configure API with token handling in baseQuery
export const farmerApi = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.NEXT_PUBLIC_API_BASE_URL,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem("accessToken");
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  reducerPath: "farmerApi",
  tagTypes: ["Products"],
  endpoints: (build) => ({
    // createCategory: build.mutation<CreateCategory, CreateCategory>({
    //   query: (createCategory) => ({
    //     url: "/auth/createCategory",
    //     method: "POST",
    //     body: createCategory,
    //   }),
    //   invalidatesTags: ["Products"],
    // }),
    getCategory: build.query<CategoriesResponse, void>({
      query: () => "/auth/getCategory",
      providesTags: ["Products"],
    }),
    listProduct: build.mutation<ListProductResponse, ListProductRequest>({
      query: (newProduct) => ({
        url: "/auth/listproduct",
        method: "POST",
        body: newProduct,
      }),
      transformResponse: (response: ListProductResponse) => response,
      invalidatesTags: ["Products"],
    }),
    getProducts: build.query<getProduct[], void>({
      query: () => "/auth/getProduct",
      providesTags: ["Products"],
    }),
    getProductsByCategoryAndPagination: build.query<
      getProductsByCategoryAndPaginationResponse,
      getProductsByCategoryAndPaginationRequest
    >({
      query: ({ page = 1, limit = 10, categoryId }) => ({
        url: `/auth/getProductsByCategoryAndPagination`,
        params: { page, limit, categoryId },
      }),
    }),
    getProductsByCategory: build.query<getProduct[], string>({
      query: (categoryId) => ({
        url: `/auth/getProductsByCategory`,
        params: { categoryId },
      }),
    }),
    updateProduct: build.mutation<UpdateProductResponse, UpdateProductRequest>({
      query: (updateProduct) => ({
        url: "/auth/updateProduct",
        method: "PUT",
        body: updateProduct,
      }),
      transformResponse: (response: UpdateProductResponse) => response,
      invalidatesTags: ["Products"],
    }),
    deleteProduct: build.mutation<DeleteProduct, DeleteProduct>({
      query: (deleteProduct) => ({
        url: "/auth/deleteProduct",
        method: "DELETE",
        body: deleteProduct,
      }),
      invalidatesTags: ["Products"],
    }),
  }),
});

// Export hooks for API endpoints
export const {
  useGetCategoryQuery,
  // useCreateCategoryMutation,
  useListProductMutation,
  useGetProductsQuery,
  useGetProductsByCategoryAndPaginationQuery,
  useGetProductsByCategoryQuery,
  useUpdateProductMutation,
  useDeleteProductMutation,
} = farmerApi;
