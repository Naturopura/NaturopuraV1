"use client";

import type { Metadata } from "next";
import localFont from "next/font/local";
import { usePathname } from "next/navigation"; // Import usePathname
import "./globals.css";
import Navbar from "./(components)/Navbar";
import Sidebar from "./(components)/Sidebar";
import Footer from "./(components)/Footer";
import { getDefaultConfig } from "@rainbow-me/rainbowkit";
import { RainbowKitProvider, lightTheme } from "@rainbow-me/rainbowkit";
import { mainnet } from "wagmi/chains";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { WagmiProvider, http } from "wagmi";
import "@rainbow-me/rainbowkit/styles.css";
import dynamic from "next/dynamic";
import ProtectedRoute from "@/auth/ProtectedRoute";

const config = getDefaultConfig({
  appName: "RainbowKit demo",
  projectId: "YOUR_PROJECT_ID",
  chains: [mainnet],
  transports: {
    [mainnet.id]: http(),
  },
});

const queryClient = new QueryClient();

const ReduxProvider = dynamic(() => import("@/store/redux-provider"), {
  ssr: false,
});

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pathname = usePathname(); // Get the current pathname
  const isDashboardPage = pathname === "/"; // Check if the current route is the home page

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ReduxProvider>
          <WagmiProvider config={config}>
            <QueryClientProvider client={queryClient}>
              <RainbowKitProvider
                theme={lightTheme({
                  accentColor: "#acb631",
                  accentColorForeground: "white",
                  borderRadius: "medium",
                  fontStack: "system",
                })}
              >
                {/* <Navbar /> */}
                {isDashboardPage && <Navbar />}
                {/* Conditionally render the Sidebar */}
                {children}
                {isDashboardPage && <Footer />}
              </RainbowKitProvider>
            </QueryClientProvider>
          </WagmiProvider>
        </ReduxProvider>
      </body>
    </html>
  );
}
